"""Autogenerated input type of AddAliasToMixpanelUserIdentity"""
input AddAliasToMixpanelUserIdentityInput {
  anonymousId: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddAliasToMixpanelUserIdentity"""
type AddAliasToMixpanelUserIdentityPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of AddAssigneesToIssue"""
input AddAssigneesToIssueInput {
  assigneeLogins: [String!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
}

"""Autogenerated return type of AddAssigneesToIssue"""
type AddAssigneesToIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of AddAssigneesToIssues"""
input AddAssigneesToIssuesInput {
  assigneeIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
}

"""Autogenerated return type of AddAssigneesToIssues"""
type AddAssigneesToIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
  unassignable: [Unassignable!]!
}

"""Autogenerated input type of AddEpicsToProject"""
input AddEpicsToProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicIds: [ID!]!
  projectId: ID!
}

"""Autogenerated return type of AddEpicsToProject"""
type AddEpicsToProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
  previousProjects: [Project]!
  project: Project!
}

"""Autogenerated input type of AddEpicsToRoadmap"""
input AddEpicsToRoadmapInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicIds: [ID!]!
  roadmapId: ID!
}

"""Autogenerated return type of AddEpicsToRoadmap"""
type AddEpicsToRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
  roadmap: Roadmap!
}

"""Autogenerated input type of AddEstimateSetValue"""
input AddEstimateSetValueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: Int!
  value: Float!
}

"""Autogenerated return type of AddEstimateSetValue"""
type AddEstimateSetValuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimateSet: EstimateSet!
}

"""Autogenerated input type of AddIssuesToEpic"""
input AddIssuesToEpicInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicId: ID!
  issueIds: [ID!]!
}

"""Autogenerated return type of AddIssuesToEpic"""
type AddIssuesToEpicPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicIssues: [EpicIssue!]!
}

"""Autogenerated input type of AddIssuesToEpics"""
input AddIssuesToEpicsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicIds: [ID!]!
  issueIds: [ID!]!
}

"""Autogenerated return type of AddIssuesToEpics"""
type AddIssuesToEpicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
}

"""Autogenerated input type of AddIssuesToReleases"""
input AddIssuesToReleasesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  releaseIds: [ID!]!
}

"""Autogenerated return type of AddIssuesToReleases"""
type AddIssuesToReleasesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  releases: [Release!]!
}

"""Autogenerated input type of AddIssuesToSprints"""
input AddIssuesToSprintsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  sprintIds: [ID!]!
}

"""Autogenerated return type of AddIssuesToSprints"""
type AddIssuesToSprintsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintIssues: [SprintIssue!]!
}

"""Autogenerated input type of AddLabelsToIssue"""
input AddLabelsToIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  labelIds: [ID!]!
}

"""Autogenerated return type of AddLabelsToIssue"""
type AddLabelsToIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of AddLabelsToIssues"""
input AddLabelsToIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  labelIds: [ID!]!
}

"""Autogenerated return type of AddLabelsToIssues"""
type AddLabelsToIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of AddOrRemoveReleaseIssues"""
input AddOrRemoveReleaseIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issuesToAdd: [IssueInfoInput!]
  issuesToRemove: [IssueInfoInput!]
  releaseId: ID!
}

"""Autogenerated return type of AddOrRemoveReleaseIssues"""
type AddOrRemoveReleaseIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of AddProjectsToRoadmap"""
input AddProjectsToRoadmapInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectIds: [ID!]!
  roadmapId: ID!
}

"""Autogenerated return type of AddProjectsToRoadmap"""
type AddProjectsToRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projects: [Project!]!
  roadmap: Roadmap!
}

"""Autogenerated input type of AddRepositoriesToRelease"""
input AddRepositoriesToReleaseInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  releaseId: ID!
  repositoryGhIds: [Int!]!
}

"""Autogenerated return type of AddRepositoriesToRelease"""
type AddRepositoriesToReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of AddRepositoryToWorkspace"""
input AddRepositoryToWorkspaceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: ID!
  workspaceId: ID!
}

"""Autogenerated return type of AddRepositoryToWorkspace"""
type AddRepositoryToWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceRepository: WorkspaceRepository!
}

"""Autogenerated input type of AddWorkspaceLabelFilters"""
input AddWorkspaceLabelFiltersInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  labelNames: [String!]!
  workspaceId: ID!
}

"""Autogenerated return type of AddWorkspaceLabelFilters"""
type AddWorkspaceLabelFiltersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!

  """created label filters"""
  workspaceLabelFilters: [WorkspaceLabelFilter!]!
}

type AnomalousIssue {
  duration: Int!
  issue: Issue!
}

"""
Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Bot implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
}

enum BucketIssueHistoryAction {
  ISSUE_ADDED
  ISSUE_REMOVED
}

"""Autogenerated input type of CloseIssues"""
input CloseIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
}

"""Autogenerated return type of CloseIssues"""
type CloseIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of CreateEpicFromIssueInfos"""
input CreateEpicFromIssueInfosInput {
  childIssues: [IssueInfoInput!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: IssueInfoInput!
}

"""Autogenerated return type of CreateEpicFromIssueInfos"""
type CreateEpicFromIssueInfosPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of CreateEpicFromIssue"""
input CreateEpicFromIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicChildIds: [ID!]
  issueId: ID!
}

"""Autogenerated return type of CreateEpicFromIssue"""
type CreateEpicFromIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of CreateEpic"""
input CreateEpicInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: IssueInput!
}

"""Autogenerated input type of CreateEpicOnProject"""
input CreateEpicOnProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: EpicInput!
  projectId: ID!
}

"""Autogenerated return type of CreateEpicOnProject"""
type CreateEpicOnProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  project: Project!
}

"""Autogenerated input type of CreateEpicOnRoadmap"""
input CreateEpicOnRoadmapInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: EpicInput!
  roadmapId: ID!
}

"""Autogenerated return type of CreateEpicOnRoadmap"""
type CreateEpicOnRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  roadmap: Roadmap!
}

"""Autogenerated return type of CreateEpic"""
type CreateEpicPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of CreateIssueDependencyFromToad"""
input CreateIssueDependencyFromToadInput {
  blockedIssue: IssueInfoInput!
  blockingIssue: IssueInfoInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateIssueDependencyFromToad"""
type CreateIssueDependencyFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueDependency: IssueDependency!
}

"""Autogenerated input type of CreateIssue"""
input CreateIssueInput {
  assignees: [String!]
  body: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  labels: [String!]
  milestone: Int
  repositoryId: ID!
  title: String!
}

"""Autogenerated return type of CreateIssue"""
type CreateIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of CreateIssuePrConnection"""
input CreateIssuePrConnectionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  pullRequestId: ID!
}

"""Autogenerated return type of CreateIssuePrConnection"""
type CreateIssuePrConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""Autogenerated input type of CreatePipeline"""
input CreatePipelineInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  description: String
  name: String!
  position: Int = -1
  workspaceId: ID!
}

"""Autogenerated return type of CreatePipeline"""
type CreatePipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
}

"""Autogenerated input type of CreatePipelineToPipelineAutomation"""
input CreatePipelineToPipelineAutomationInput {
  applyRetroactively: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  destinationPipelineId: ID!
  sourcePipelineId: ID!
}

"""Autogenerated return type of CreatePipelineToPipelineAutomation"""
type CreatePipelineToPipelineAutomationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  movedIssuesCount: Int
  pipelineToPipelineAutomation: PipelineToPipelineAutomation!
}

"""Autogenerated input type of CreateProjectOnRoadmap"""
input CreateProjectOnRoadmapInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: ProjectInput!
  roadmapId: ID!
}

"""Autogenerated return type of CreateProjectOnRoadmap"""
type CreateProjectOnRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
  roadmap: Roadmap!
}

"""Autogenerated input type of CreateRelease"""
input CreateReleaseInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: ReleaseCreateInput!
}

"""Autogenerated return type of CreateRelease"""
type CreateReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of CreateSprintConfig"""
input CreateSprintConfigInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintConfig: SprintConfigCreateInput!
}

"""Autogenerated return type of CreateSprintConfig"""
type CreateSprintConfigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintConfig: SprintConfig!
}

"""Autogenerated input type of CreateWorkspace"""
input CreateWorkspaceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  defaultRepositoryGhId: Int
  description: String
  githubProject: GithubProjectInput
  name: String!
  repositoryGhIds: [Int!]!
}

"""Autogenerated return type of CreateWorkspace"""
type CreateWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of CreateWorkspaceWithZhOrg"""
input CreateWorkspaceWithZhOrgInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  description: String
  name: String!
  zenhubOrganizationId: ID!
}

"""Autogenerated return type of CreateWorkspaceWithZhOrg"""
type CreateWorkspaceWithZhOrgPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of DeclineEnterpriseSeatRequest"""
input DeclineEnterpriseSeatRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  login: String!
}

"""Autogenerated return type of DeclineEnterpriseSeatRequest"""
type DeclineEnterpriseSeatRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

"""Autogenerated input type of DeleteEpicByIssueInfo"""
input DeleteEpicByIssueInfoInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: IssueInfoInput!
}

"""Autogenerated return type of DeleteEpicByIssueInfo"""
type DeleteEpicByIssueInfoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of DeleteIssueDependencyFromToad"""
input DeleteIssueDependencyFromToadInput {
  blockedIssue: IssueInfoInput!
  blockingIssue: IssueInfoInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteIssueDependencyFromToad"""
type DeleteIssueDependencyFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueDependency: IssueDependency!
}

"""Autogenerated input type of DeleteIssuePrConnection"""
input DeleteIssuePrConnectionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  pullRequestId: ID!
}

"""Autogenerated return type of DeleteIssuePrConnection"""
type DeleteIssuePrConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""Autogenerated input type of DeletePipeline"""
input DeletePipelineInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  destinationPipelineId: ID!
  pipelineId: ID!
}

"""Autogenerated return type of DeletePipeline"""
type DeletePipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  destinationPipeline: Pipeline!
  eventId: ID!
}

"""Autogenerated input type of DeletePipelineToPipelineAutomation"""
input DeletePipelineToPipelineAutomationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineToPipelineAutomationId: ID!
}

"""Autogenerated return type of DeletePipelineToPipelineAutomation"""
type DeletePipelineToPipelineAutomationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineToPipelineAutomation: PipelineToPipelineAutomation!
}

"""Autogenerated input type of DeletePrConnectionFromToad"""
input DeletePrConnectionFromToadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pullRequest: IssueInfoInput!
}

"""Autogenerated return type of DeletePrConnectionFromToad"""
type DeletePrConnectionFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pullRequest: Issue!
}

"""Autogenerated input type of DeleteProject"""
input DeleteProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
}

"""Autogenerated return type of DeleteProject"""
type DeleteProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
}

"""Autogenerated input type of DeleteRepositoryFavoriteFromToad"""
input DeleteRepositoryFavoriteFromToadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: Int!
}

"""Autogenerated return type of DeleteRepositoryFavoriteFromToad"""
type DeleteRepositoryFavoriteFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repository: Repository!
}

"""Autogenerated input type of DeleteSprintConfigAndOpenSprints"""
input DeleteSprintConfigAndOpenSprintsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated return type of DeleteSprintConfigAndOpenSprints"""
type DeleteSprintConfigAndOpenSprintsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of DeleteWorkspaceFavorite"""
input DeleteWorkspaceFavoriteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated return type of DeleteWorkspaceFavorite"""
type DeleteWorkspaceFavoritePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of DeleteWorkspace"""
input DeleteWorkspaceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated return type of DeleteWorkspace"""
type DeleteWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated input type of DisconnectWorkspaceRepository"""
input DisconnectWorkspaceRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: Int!
  workspaceId: ID!
}

"""Autogenerated return type of DisconnectWorkspaceRepository"""
type DisconnectWorkspaceRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

type EnterpriseInstance implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  license: EnterpriseLicense
  name: String!
  seatAssignmentStrategy: EnterpriseSeatAssignmentStrategy!
  updatedAt: ISO8601DateTime!
}

type EnterpriseLicense {
  expiredAt: ISO8601DateTime!
  startedAt: ISO8601DateTime!
  totalSeatCount: Int!
}

type EnterpriseSeat implements Timestamps {
  approvedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  id: ID!
  requestedAt: ISO8601DateTime
  role: EnterpriseSeatRole!
  updatedAt: ISO8601DateTime!
  zenhubUser: ZenhubUser!
}

enum EnterpriseSeatAssignmentStrategy {
  MANUAL
  UNLIMITED
  UP_TO_LIMIT
}

enum EnterpriseSeatRole {
  ADMIN
  USER
}

type Epic implements IssueProgress & Node & Timestamps & ViewerPermission {
  childIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueFiltersInput

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  createdAt: ISO8601DateTime!
  endOn: ISO8601Date
  id: ID!
  issue: Issue!
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
  project: Project
  startOn: ISO8601Date
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
}

"""Filter issue search results"""
input EpicAssignableIssueSearchFiltersInput {
  pipelineIds: [ID!]!
  repositoryIds: [ID!]!
}

"""The connection type for Epic."""
type EpicConnection {
  """A list of edges."""
  edges: [EpicEdge!]!

  """A list of nodes."""
  nodes: [Epic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EpicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Epic!
}

input EpicInput {
  issue: IssueInput!
}

type EpicIssue implements Node {
  epic: Epic!
  id: ID!
  issue: Issue!
}

enum EpicOrderField {
  CREATED_AT
  TITLE
}

"""Order of Epic connection"""
input EpicOrderInput {
  direction: OrderDirection
  field: EpicOrderField
}

"""Filter issues by special epic filters"""
input EpicSearchFiltersInput {
  id: IdInput
  specialFilters: EpicSpecialFilter
}

enum EpicSpecialFilter {
  """Show all epics and hide subtasks"""
  epics_only

  """Show all epics and subtasks"""
  epics_with_subtasks

  """Hide epics"""
  no_epics

  """Show all issues not in an epic"""
  not_in_epic
}

type Estimate implements Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  value: Float!
}

type EstimateSet {
  repository: Repository!
  values: [Float!]!
}

type EstimationGroup {
  id: ID!
  inviter: ZenhubUser!
  participants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    issueIds: [ID!]!

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ZenhubUserConnection!
  workspace: Workspace!
}

"""The connection type for EstimationGroup."""
type EstimationGroupConnection {
  """A list of edges."""
  edges: [EstimationGroupEdge!]!

  """A list of nodes."""
  nodes: [EstimationGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EstimationGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: EstimationGroup!
}

type EstimationVote implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  updatedAt: ISO8601DateTime!
  value: Float
  voter: ZenhubUser!
}

"""The connection type for EstimationVote."""
type EstimationVoteConnection {
  """A list of edges."""
  edges: [EstimationVoteEdge!]!

  """A list of nodes."""
  nodes: [EstimationVote!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type EstimationVoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: EstimationVote!
}

"""Filter a String column"""
input FloatInput {
  in: [Float!]
  nin: [Float!]
  notInAny: Boolean = false
}

"""
A reference to a GitHub project via Github repository node id and repository id
"""
input GithubProjectInput {
  githubProjectId: String!
  githubProjectRepoGhId: Int!
}

interface GithubTimestamps {
  ghCreatedAt: ISO8601DateTime!
  ghUpdatedAt: ISO8601DateTime!
}

enum HubspotObject {
  COMPANY
  CONTACT
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Filter an ID column"""
input IdInput {
  in: [ID!]
  nin: [ID!]
  notInAny: Boolean = false
}

"""Autogenerated input type of IncrementUserProperties"""
input IncrementUserPropertiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  properties: JSON!
}

"""Autogenerated return type of IncrementUserProperties"""
type IncrementUserPropertiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of InviteToEstimate"""
input InviteToEstimateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  message: String
  workspaceId: ID
  zenhubUserIds: [ID!]!
}

"""Autogenerated return type of InviteToEstimate"""
type InviteToEstimatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimationVotes: [EstimationVote!]!
}

type Issue implements GithubTimestamps & Node & Timestamps & ViewerPermission {
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!

  """Issues that are blocked by this Issue."""
  blockedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueFiltersInput

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!

  """Issues that are blocking this Issue."""
  blockingIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueFiltersInput

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  body: String
  closedAt: ISO8601DateTime

  """1st step connections of the PR. Only available for PRs"""
  connections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  createdAt: ISO8601DateTime!
  epic: Epic
  estimate: Estimate
  estimationVotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EstimationVoteConnection!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  ghUpdatedAt: ISO8601DateTime!
  htmlUrl: String!
  id: ID!
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LabelConnection!
  metadata(workspaceId: ID!): JSON
  milestone: Milestone
  number: Int!
  parentEpics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EpicConnection!
  pipelineIssue(workspaceId: ID!): PipelineIssue
  pipelineIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineIssueConnection!
  prConnectionStatus: PrConnectionStatus @deprecated(reason: "Used for Toad backwards compatibility on PR page")
  pullRequest: Boolean!
  pullRequestObject: PullRequest
  pullRequestReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestReviewConnection
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ReleaseConnection!
  repository: Repository!
  reviewRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ReviewRequestConnection
  sprints(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID
  ): SprintConnection!
  state: IssueState!
  timelineItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TimelineItemConnection!
  title: String!
  updatedAt: ISO8601DateTime!
  user: Owner!
  viewerPermission: PermissionLevel!
}

enum IssueAction {
  ESTIMATION_VOTES_INVITES_ADDED
  ESTIMATION_VOTES_VALUE_SET
  ESTIMATION_VOTES_VOTE_REMOVED
}

type IssueBroadcast {
  """Action that triggered a broadcast"""
  action: IssueAction!
  estimationVotes: [EstimationVote!]

  """Name of the field with a fulfilled data"""
  fieldName: String!

  """
  ID of the record the operation performed on. Typically the ID of a removed record
  """
  subjectId: ID
}

"""The connection type for Issue."""
type IssueConnection {
  """A list of edges."""
  edges: [IssueEdge!]!

  """A list of nodes."""
  nodes: [Issue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  pipelineCounts: PipelineCounts!
  splitCounts: JSON! @deprecated(reason: "Use common field pipelineCounts instead")
  sumEstimates: Float! @deprecated(reason: "Use common field pipelineCounts instead")
  totalCount: Int!
}

type IssueCountProgress {
  closed: Int!
  open: Int!
  total: Int!
}

type IssueDependency implements Node & Timestamps {
  blockedIssue: Issue!
  blockingIssue: Issue!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

"""An edge in a connection."""
type IssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Issue!
}

type IssueEstimateProgress {
  closed: Float!
  open: Float!
  total: Float!
}

"""Filter Issues"""
input IssueFiltersInput {
  repositoryId: IdInput
  state: IssueStateInput
}

type IssueFlowStats {
  anomalies: [AnomalousIssue!]
  avgCycleDays: Int
  inDevelopmentDays: Int
  inReviewDays: Int
}

"""
A reference to a GitHub issue via Github repository id and issue number
"""
input IssueInfoInput {
  issueNumber: Int!
  repositoryGhId: Int!
}

input IssueInput {
  assignees: [String!]
  body: String
  labels: [String!]
  milestone: Int
  repositoryGhId: Int
  repositoryId: ID
  title: String!
}

enum IssueOrderField {
  """Order by assignee logins"""
  assignees

  """Order by issue created_at"""
  created_at

  """Order by sprint dates"""
  sprints
}

"""Sort issue search results"""
input IssueOrderInput {
  direction: OrderDirection!
  field: IssueOrderField!
}

"""Autogenerated return type of Issue"""
type IssuePayload {
  updates: IssueBroadcast!
}

interface IssueProgress {
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
}

"""Filter issue search results"""
input IssueSearchFiltersInput {
  assignees: StringInput
  epics: EpicSearchFiltersInput
  estimates: FloatInput
  labels: StringInput
  matchType: MatchingFilter = all
  releases: IdInput
  repositoryGhIds: [Int!]
  sprints: IdInput
  users: StringInput
}

enum IssueState {
  CLOSED
  OPEN
}

"""Filter by IssueState"""
input IssueStateInput {
  eq: IssueState!
}

type IssueTemplate {
  body: String!
  default: Boolean!
  id: ID!
  metadata: JSON
  path: String!
  raw: String!
  repository: Repository!
}

"""The connection type for IssueTemplate."""
type IssueTemplateConnection {
  """A list of edges."""
  edges: [IssueTemplateEdge!]!

  """A list of nodes."""
  nodes: [IssueTemplate!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type IssueTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IssueTemplate!
}

type IssueUpdate {
  estimationState: String
  id: ID!
}

"""Represents untyped JSON"""
scalar JSON

type Label implements Timestamps {
  color: String
  createdAt: ISO8601DateTime!
  description: String
  ghId: BigInt!
  ghNodeId: ID!
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  name: String!
  repository: Repository!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Label."""
type LabelConnection {
  """A list of edges."""
  edges: [LabelEdge!]!

  """A list of nodes."""
  nodes: [Label!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type LabelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Label!
}

enum MatchingFilter {
  """Include records that match all filters"""
  all

  """Include records that match any filters"""
  any
}

type Milestone implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  creator: Owner
  description: String
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  number: Int!
  repository: Repository!
  state: MilestoneState!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Milestone."""
type MilestoneConnection {
  """A list of edges."""
  edges: [MilestoneEdge!]!

  """A list of nodes."""
  nodes: [Milestone!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type MilestoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Milestone!
}

enum MilestoneState {
  CLOSED
  OPEN
}

"""Autogenerated input type of MoveAllPipelineIssues"""
input MoveAllPipelineIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  destinationPipelineId: ID!
  pipelineIds: [ID!]!
}

"""Autogenerated return type of MoveAllPipelineIssues"""
type MoveAllPipelineIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of MoveIssue"""
input MoveIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  pipelineId: ID!
  position: Int = 0
}

"""Autogenerated return type of MoveIssue"""
type MoveIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
  pipeline: Pipeline!
}

"""Autogenerated input type of MoveIssueRelativeTo"""
input MoveIssueRelativeToInput {
  afterPipelineIssueId: ID
  beforePipelineIssueId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  pipelineId: ID
  position: PipelineIssuePosition
}

"""Autogenerated return type of MoveIssueRelativeTo"""
type MoveIssueRelativeToPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssueMove: PipelineIssueMove!
}

"""Autogenerated input type of MoveIssuesFromToad"""
input MoveIssuesFromToadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issues: [IssueInfoInput!]!
  pipelineId: ID!
  position: Int!
  priorityId: ID
}

"""Autogenerated return type of MoveIssuesFromToad"""
type MoveIssuesFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issues: [Issue!]!
  pipeline: Pipeline!
}

"""Autogenerated input type of MovePipelineIssues"""
input MovePipelineIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineId: ID!
  pipelineIssueIds: [ID!]!
  position: PipelineIssuePosition!
}

"""Autogenerated return type of MovePipelineIssues"""
type MovePipelineIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
  pipelineIssues: [PipelineIssue!]!
}

type Mutation {
  """Add assignees to an Issue"""
  addAssigneesToIssue(
    """Parameters for AddAssigneesToIssue"""
    input: AddAssigneesToIssueInput!
  ): AddAssigneesToIssuePayload @deprecated(reason: "This mutation must not be used. Use addAssigneesToIssues.")

  """Add assignees to multiple Issues"""
  addAssigneesToIssues(
    """Parameters for AddAssigneesToIssues"""
    input: AddAssigneesToIssuesInput!
  ): AddAssigneesToIssuesPayload

  """Add Epics to a Project"""
  addEpicsToProject(
    """Parameters for AddEpicsToProject"""
    input: AddEpicsToProjectInput!
  ): AddEpicsToProjectPayload

  """Add Epics to a Roadmap"""
  addEpicsToRoadmap(
    """Parameters for AddEpicsToRoadmap"""
    input: AddEpicsToRoadmapInput!
  ): AddEpicsToRoadmapPayload

  """Add a value to an EstimateSet"""
  addEstimateSetValue(
    """Parameters for AddEstimateSetValue"""
    input: AddEstimateSetValueInput!
  ): AddEstimateSetValuePayload

  """Adds Issues to an Epic"""
  addIssuesToEpic(
    """Parameters for AddIssuesToEpic"""
    input: AddIssuesToEpicInput!
  ): AddIssuesToEpicPayload @deprecated(reason: "This mutation must not be used. Use addIssuesToEpics.")

  """Adds Issues to Epics"""
  addIssuesToEpics(
    """Parameters for AddIssuesToEpics"""
    input: AddIssuesToEpicsInput!
  ): AddIssuesToEpicsPayload

  """Add Issues to Releases"""
  addIssuesToReleases(
    """Parameters for AddIssuesToReleases"""
    input: AddIssuesToReleasesInput!
  ): AddIssuesToReleasesPayload

  """Add Issues to Sprints"""
  addIssuesToSprints(
    """Parameters for AddIssuesToSprints"""
    input: AddIssuesToSprintsInput!
  ): AddIssuesToSprintsPayload

  """Add labels to an Issue"""
  addLabelsToIssue(
    """Parameters for AddLabelsToIssue"""
    input: AddLabelsToIssueInput!
  ): AddLabelsToIssuePayload @deprecated(reason: "This mutation must not be used. Use addLabelsToIssues.")

  """Add labels to multiple Issues"""
  addLabelsToIssues(
    """Parameters for AddLabelsToIssues"""
    input: AddLabelsToIssuesInput!
  ): AddLabelsToIssuesPayload

  """Add or remove issues to/from a release"""
  addOrRemoveReleaseIssues(
    """Parameters for AddOrRemoveReleaseIssues"""
    input: AddOrRemoveReleaseIssuesInput!
  ): AddOrRemoveReleaseIssuesPayload @deprecated(reason: "This mutation must not be used for new features")

  """Add Projects to a Roadmap"""
  addProjectsToRoadmap(
    """Parameters for AddProjectsToRoadmap"""
    input: AddProjectsToRoadmapInput!
  ): AddProjectsToRoadmapPayload

  """Add repositories to a release"""
  addRepositoriesToRelease(
    """Parameters for AddRepositoriesToRelease"""
    input: AddRepositoriesToReleaseInput!
  ): AddRepositoriesToReleasePayload

  """Add a Repository to a Workspace"""
  addRepositoryToWorkspace(
    """Parameters for AddRepositoryToWorkspace"""
    input: AddRepositoryToWorkspaceInput!
  ): AddRepositoryToWorkspacePayload

  """Add label filters to a Workspace"""
  addWorkspaceLabelFilters(
    """Parameters for AddWorkspaceLabelFilters"""
    input: AddWorkspaceLabelFiltersInput!
  ): AddWorkspaceLabelFiltersPayload

  """
  accepts an anonymous id to alias to the authed user(events will be merged)
  """
  analyticsAliasMixpanelIdentity(
    """Parameters for AddAliasToMixpanelUserIdentity"""
    input: AddAliasToMixpanelUserIdentityInput!
  ): AddAliasToMixpanelUserIdentityPayload

  """Increment properties for a user"""
  analyticsIncrementUserProperties(
    """Parameters for IncrementUserProperties"""
    input: IncrementUserPropertiesInput!
  ): IncrementUserPropertiesPayload

  """Log tracking for an event on a user"""
  analyticsTrackEvent(
    """Parameters for TrackEvent"""
    input: TrackEventInput!
  ): TrackEventPayload

  """Update properties for an organization(only for hubspot)"""
  analyticsUpdateOrgProperties(
    """Parameters for UpdateOrgProperties"""
    input: UpdateOrgPropertiesInput!
  ): UpdateOrgPropertiesPayload

  """Update properties for a user"""
  analyticsUpdateUserProperties(
    """Parameters for UpdateUserProperties"""
    input: UpdateUserPropertiesInput!
  ): UpdateUserPropertiesPayload

  """Closes multiple issues at once"""
  closeIssues(
    """Parameters for CloseIssues"""
    input: CloseIssuesInput!
  ): CloseIssuesPayload

  """Creates an Epic"""
  createEpic(
    """Parameters for CreateEpic"""
    input: CreateEpicInput!
  ): CreateEpicPayload

  """Convert issue to an epic and add issues to it"""
  createEpicFromIssue(
    """Parameters for CreateEpicFromIssue"""
    input: CreateEpicFromIssueInput!
  ): CreateEpicFromIssuePayload

  """Convert issue to an epic and add issues to it"""
  createEpicFromIssueInfos(
    """Parameters for CreateEpicFromIssueInfos"""
    input: CreateEpicFromIssueInfosInput!
  ): CreateEpicFromIssueInfosPayload

  """Create an Epic on a Project"""
  createEpicOnProject(
    """Parameters for CreateEpicOnProject"""
    input: CreateEpicOnProjectInput!
  ): CreateEpicOnProjectPayload

  """Create an Epic on a Roadmap"""
  createEpicOnRoadmap(
    """Parameters for CreateEpicOnRoadmap"""
    input: CreateEpicOnRoadmapInput!
  ): CreateEpicOnRoadmapPayload

  """Creates an Issue"""
  createIssue(
    """Parameters for CreateIssue"""
    input: CreateIssueInput!
  ): CreateIssuePayload

  """Creates a Dependency between two issues"""
  createIssueDependencyFromToad(
    """Parameters for CreateIssueDependencyFromToad"""
    input: CreateIssueDependencyFromToadInput!
  ): CreateIssueDependencyFromToadPayload

  """Creates Issue<->PR Connection"""
  createIssuePrConnection(
    """Parameters for CreateIssuePrConnection"""
    input: CreateIssuePrConnectionInput!
  ): CreateIssuePrConnectionPayload

  """Create a new Pipeline"""
  createPipeline(
    """Parameters for CreatePipeline"""
    input: CreatePipelineInput!
  ): CreatePipelinePayload

  """Create a new PipelineToPipelineAutomation"""
  createPipelineToPipelineAutomation(
    """Parameters for CreatePipelineToPipelineAutomation"""
    input: CreatePipelineToPipelineAutomationInput!
  ): CreatePipelineToPipelineAutomationPayload

  """Create a Project on a Roadmap"""
  createProjectOnRoadmap(
    """Parameters for CreateProjectOnRoadmap"""
    input: CreateProjectOnRoadmapInput!
  ): CreateProjectOnRoadmapPayload

  """Create a release"""
  createRelease(
    """Parameters for CreateRelease"""
    input: CreateReleaseInput!
  ): CreateReleasePayload

  """Creates a SprintConfig for a workspace"""
  createSprintConfig(
    """Parameters for CreateSprintConfig"""
    input: CreateSprintConfigInput!
  ): CreateSprintConfigPayload

  """Create a Workspace"""
  createWorkspace(
    """Parameters for CreateWorkspace"""
    input: CreateWorkspaceInput!
  ): CreateWorkspacePayload

  """Create a Workspace for Zenhub Organization"""
  createWorkspaceWithZhOrg(
    """Parameters for CreateWorkspaceWithZhOrg"""
    input: CreateWorkspaceWithZhOrgInput!
  ): CreateWorkspaceWithZhOrgPayload

  """Decline an enterprise seat request"""
  declineEnterpriseSeatRequest(
    """Parameters for DeclineEnterpriseSeatRequest"""
    input: DeclineEnterpriseSeatRequestInput!
  ): DeclineEnterpriseSeatRequestPayload

  """Destroy epic and its dependents"""
  deleteEpicByIssueInfo(
    """Parameters for DeleteEpicByIssueInfo"""
    input: DeleteEpicByIssueInfoInput!
  ): DeleteEpicByIssueInfoPayload

  """Delete a Dependency between two issues"""
  deleteIssueDependencyFromToad(
    """Parameters for DeleteIssueDependencyFromToad"""
    input: DeleteIssueDependencyFromToadInput!
  ): DeleteIssueDependencyFromToadPayload

  """Deletes Issue<->PR Connection"""
  deleteIssuePrConnection(
    """Parameters for DeleteIssuePrConnection"""
    input: DeleteIssuePrConnectionInput!
  ): DeleteIssuePrConnectionPayload

  """Delete a Pipeline"""
  deletePipeline(
    """Parameters for DeletePipeline"""
    input: DeletePipelineInput!
  ): DeletePipelinePayload

  """Delete a PipelineToPipelineAutomation"""
  deletePipelineToPipelineAutomation(
    """Parameters for DeletePipelineToPipelineAutomation"""
    input: DeletePipelineToPipelineAutomationInput!
  ): DeletePipelineToPipelineAutomationPayload

  """
  Deletes Issue<->PR Connection for a Pull Request
                          with Toad input conventions
  """
  deletePrConnectionFromToad(
    """Parameters for DeletePrConnectionFromToad"""
    input: DeletePrConnectionFromToadInput!
  ): DeletePrConnectionFromToadPayload

  """Delete a Project"""
  deleteProject(
    """Parameters for DeleteProject"""
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """Deletes a repository favorite"""
  deleteRepositoryFavoriteFromToad(
    """Parameters for DeleteRepositoryFavoriteFromToad"""
    input: DeleteRepositoryFavoriteFromToadInput!
  ): DeleteRepositoryFavoriteFromToadPayload

  """Delete a SprintConfig and open Sprints for a workspace"""
  deleteSprintConfigAndOpenSprints(
    """Parameters for DeleteSprintConfigAndOpenSprints"""
    input: DeleteSprintConfigAndOpenSprintsInput!
  ): DeleteSprintConfigAndOpenSprintsPayload

  """Deletes a Workspace"""
  deleteWorkspace(
    """Parameters for DeleteWorkspace"""
    input: DeleteWorkspaceInput!
  ): DeleteWorkspacePayload

  """Deletes a workspace favorite"""
  deleteWorkspaceFavorite(
    """Parameters for DeleteWorkspaceFavorite"""
    input: DeleteWorkspaceFavoriteInput!
  ): DeleteWorkspaceFavoritePayload

  """Disconnects a repository from a Workspace"""
  disconnectWorkspaceRepository(
    """Parameters for DisconnectWorkspaceRepository"""
    input: DisconnectWorkspaceRepositoryInput!
  ): DisconnectWorkspaceRepositoryPayload

  """Invite a list of users to estimate a list of issues. Errors on PR"""
  inviteToEstimate(
    """Parameters for InviteToEstimate"""
    input: InviteToEstimateInput!
  ): InviteToEstimatePayload

  """
  Move all pipeline issues from source pipelines to a destination pipeline
  """
  moveAllPipelineIssues(
    """Parameters for MoveAllPipelineIssues"""
    input: MoveAllPipelineIssuesInput!
  ): MoveAllPipelineIssuesPayload

  """Move issues to a position in a pipeline"""
  moveIssue(
    """Parameters for MoveIssue"""
    input: MoveIssueInput!
  ): MoveIssuePayload

  """Move Issue after/before a PipelineIssue or to start/end"""
  moveIssueRelativeTo(
    """Parameters for MoveIssueRelativeTo"""
    input: MoveIssueRelativeToInput!
  ): MoveIssueRelativeToPayload

  """Move issues inside of a Workspace with Toad input conventions"""
  moveIssuesFromToad(
    """Parameters for MoveIssuesFromToad"""
    input: MoveIssuesFromToadInput!
  ): MoveIssuesFromToadPayload

  """Move PipelineIssues to either top or bottom"""
  movePipelineIssues(
    """Parameters for MovePipelineIssues"""
    input: MovePipelineIssuesInput!
  ): MovePipelineIssuesPayload

  """Remove assignees from an Issue"""
  removeAssigneesFromIssue(
    """Parameters for RemoveAssigneesFromIssue"""
    input: RemoveAssigneesFromIssueInput!
  ): RemoveAssigneesFromIssuePayload @deprecated(reason: "This mutation must not be used. Use removeAssigneesFromIssues.")

  """Remove assignees from multiple Issues"""
  removeAssigneesFromIssues(
    """Parameters for RemoveAssigneesFromIssues"""
    input: RemoveAssigneesFromIssuesInput!
  ): RemoveAssigneesFromIssuesPayload

  """Removes an Epic from a Project"""
  removeEpicFromProject(
    """Parameters for RemoveEpicFromProject"""
    input: RemoveEpicFromProjectInput!
  ): RemoveEpicFromProjectPayload

  """Removes an Epic from a Roadmap"""
  removeEpicFromRoadmap(
    """Parameters for RemoveEpicFromRoadmap"""
    input: RemoveEpicFromRoadmapInput!
  ): RemoveEpicFromRoadmapPayload

  """Remove a value from an EstimateSet"""
  removeEstimateSetValue(
    """Parameters for RemoveEstimateSetValue"""
    input: RemoveEstimateSetValueInput!
  ): RemoveEstimateSetValuePayload

  """Remove a vote on issue estimation"""
  removeEstimationVote(
    """Parameters for RemoveEstimationVote"""
    input: RemoveEstimationVoteInput!
  ): RemoveEstimationVotePayload

  """Removes multiple issue priorities"""
  removeIssueInfoPriorities(
    """Parameters for RemoveIssueInfoPriorities"""
    input: RemoveIssueInfoPrioritiesInput!
  ): RemoveIssueInfoPrioritiesPayload

  """Removes Issues from an Epic"""
  removeIssuesFromEpic(
    """Parameters for RemoveIssuesFromEpic"""
    input: RemoveIssuesFromEpicInput!
  ): RemoveIssuesFromEpicPayload @deprecated(reason: "This mutation must not be used. Use removeIssuesFromEpics.")

  """Remove Issues from Epics"""
  removeIssuesFromEpics(
    """Parameters for RemoveIssuesFromEpics"""
    input: RemoveIssuesFromEpicsInput!
  ): RemoveIssuesFromEpicsPayload

  """Remove Issues from Releases"""
  removeIssuesFromReleases(
    """Parameters for RemoveIssuesFromReleases"""
    input: RemoveIssuesFromReleasesInput!
  ): RemoveIssuesFromReleasesPayload

  """Remove Issues from Sprints"""
  removeIssuesFromSprints(
    """Parameters for RemoveIssuesFromSprints"""
    input: RemoveIssuesFromSprintsInput!
  ): RemoveIssuesFromSprintsPayload

  """Remove labels from an Issue"""
  removeLabelsFromIssue(
    """Parameters for RemoveLabelsFromIssue"""
    input: RemoveLabelsFromIssueInput!
  ): RemoveLabelsFromIssuePayload @deprecated(reason: "This mutation must not be used. Use removeLabelsFromIssues.")

  """Remove labels from multiple Issues"""
  removeLabelsFromIssues(
    """Parameters for RemoveLabelsFromIssues"""
    input: RemoveLabelsFromIssuesInput!
  ): RemoveLabelsFromIssuesPayload

  """Remove a Project from a Roadmap"""
  removeProjectFromRoadmap(
    """Parameters for RemoveProjectFromRoadmap"""
    input: RemoveProjectFromRoadmapInput!
  ): RemoveProjectFromRoadmapPayload

  """Remove repositories from a release"""
  removeRepositoriesFromRelease(
    """Parameters for RemoveRepositoriesFromRelease"""
    input: RemoveRepositoriesFromReleaseInput!
  ): RemoveRepositoriesFromReleasePayload

  """Removes label filters from a Workspace"""
  removeWorkspaceLabelFilters(
    """Parameters for RemoveWorkspaceLabelFilters"""
    input: RemoveWorkspaceLabelFiltersInput!
  ): RemoveWorkspaceLabelFiltersPayload

  """Request an enterprise seat for current user"""
  requestEnterpriseSeat(
    """Parameters for RequestEnterpriseSeat"""
    input: RequestEnterpriseSeatInput!
  ): RequestEnterpriseSeatPayload

  """Seat entreprise users"""
  seatEnterpriseUsers(
    """Parameters for SeatEnterpriseUsers"""
    input: SeatEnterpriseUsersInput!
  ): SeatEnterpriseUsersPayload

  """Sets a default workspace repository"""
  setDefaultWorkspaceRepositoryFromToad(
    """Parameters for SetDefaultWorkspaceRepositoryFromToad"""
    input: SetDefaultWorkspaceRepositoryFromToadInput!
  ): SetDefaultWorkspaceRepositoryFromToadPayload

  """Set the enterprise seat assignment strategy"""
  setEnterpriseSeatAssignmentStrategy(
    """Parameters for SetEnterpriseSeatAssignmentStrategy"""
    input: SetEnterpriseSeatAssignmentStrategyInput!
  ): SetEnterpriseSeatAssignmentStrategyPayload

  """Update the role of an enterprise Zenhub user for seat management"""
  setEnterpriseUserRole(
    """Parameters for SetEnterpriseUserRole"""
    input: SetEnterpriseUserRoleInput!
  ): SetEnterpriseUserRolePayload

  """Set an estimate on an Issue"""
  setEstimate(
    """Parameters for SetEstimate"""
    input: SetEstimateInput!
  ): SetEstimatePayload

  """Set an estimate on an Issue based on issue info"""
  setEstimateFromToad(
    """Parameters for SetEstimateFromToad"""
    input: SetEstimateFromToadInput!
  ): SetEstimateFromToadPayload

  """Give a vote on issue estimation"""
  setEstimationVote(
    """Parameters for SetEstimationVote"""
    input: SetEstimationVoteInput!
  ): SetEstimationVotePayload

  """Sets a repository as favorite"""
  setFavoriteRepositoryFromToad(
    """Parameters for SetFavoriteRepositoryFromToad"""
    input: SetFavoriteRepositoryFromToadInput!
  ): SetFavoriteRepositoryFromToadPayload

  """Sets a workspace as favorite"""
  setFavoriteWorkspace(
    """Parameters for SetFavoriteWorkspace"""
    input: SetFavoriteWorkspaceInput!
  ): SetFavoriteWorkspacePayload

  """Sets multiple issue priorities"""
  setIssueInfoPriorities(
    """Parameters for SetIssueInfoPriorities"""
    input: SetIssueInfoPrioritiesInput!
  ): SetIssueInfoPrioritiesPayload

  """Set estimates on multiple Issues"""
  setMultipleEstimates(
    """Parameters for SetMultipleEstimates"""
    input: SetMultipleEstimatesInput!
  ): SetMultipleEstimatesPayload

  """Set stages for pipelines"""
  setPipelineStages(
    """Parameters for SetPipelineStages"""
    input: SetPipelineStagesInput!
  ): SetPipelineStagesPayload

  """Set priority on PipelineIssues"""
  setPriorityOnPipelineIssues(
    """Parameters for SetPriorityOnPipelineIssues"""
    input: SetPriorityOnPipelineIssuesInput!
  ): SetPriorityOnPipelineIssuesPayload

  """Sets a pull_request_pipeline_id for a workspace"""
  setPullRequestPipeline(
    """Parameters for SetPullRequestPipeline"""
    input: SetPullRequestPipelineInput!
  ): SetPullRequestPipelinePayload

  """For a user, set Workspace's last viewed timestamp to now"""
  setWorkspaceViewedNow(
    """Parameters for SetWorkspaceViewedNow"""
    input: SetWorkspaceViewedNowInput!
  ): SetWorkspaceViewedNowPayload

  """Splits a repository from a Workspace"""
  splitWorkspaceRepository(
    """Parameters for SplitWorkspaceRepository"""
    input: SplitWorkspaceRepositoryInput!
  ): SplitWorkspaceRepositoryPayload

  """Submit feedback to ProductBoard"""
  submitProductFeedback(
    """Parameters for SubmitProductFeedback"""
    input: SubmitProductFeedbackInput!
  ): SubmitProductFeedbackPayload

  """Unseat an entreprise user"""
  unseatEnterpriseUser(
    """Parameters for UnseatEnterpriseUser"""
    input: UnseatEnterpriseUserInput!
  ): UnseatEnterpriseUserPayload

  """Update epic's startOn and endOn dates"""
  updateEpicDates(
    """Parameters for UpdateEpicDates"""
    input: UpdateEpicDatesInput!
  ): UpdateEpicDatesPayload

  """Adds and Removes Issues from an Epic"""
  updateEpicIssuesByIssueInfos(
    """Parameters for UpdateEpicIssuesByIssueInfos"""
    input: UpdateEpicIssuesByIssueInfosInput!
  ): UpdateEpicIssuesByIssueInfosPayload

  """Update hubspot id for zenhub user or org"""
  updateHubspotId(
    """Parameters for UpdateHubspotId"""
    input: UpdateHubspotIdInput!
  ): UpdateHubspotIdPayload

  """Update an existing Issue"""
  updateIssue(
    """Parameters for UpdateIssue"""
    input: UpdateIssueInput!
  ): UpdateIssuePayload

  """Update a Pipeline"""
  updatePipeline(
    """Parameters for UpdatePipeline"""
    input: UpdatePipelineInput!
  ): UpdatePipelinePayload

  """Update a Project"""
  updateProject(
    """Parameters for UpdateProject"""
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """Update Project's startOn and endOn dates"""
  updateProjectDates(
    """Parameters for UpdateProjectDates"""
    input: UpdateProjectDatesInput!
  ): UpdateProjectDatesPayload

  """Update a Project State"""
  updateProjectState(
    """Parameters for UpdateProjectState"""
    input: UpdateProjectStateInput!
  ): UpdateProjectStatePayload

  """Update a release"""
  updateRelease(
    """Parameters for UpdateRelease"""
    input: UpdateReleaseInput!
  ): UpdateReleasePayload

  """Update an existing Sprint"""
  updateSprint(
    """Parameters for UpdateSprint"""
    input: UpdateSprintInput!
  ): UpdateSprintPayload

  """Updates a SprintConfig for a workspace"""
  updateSprintConfig(
    """Parameters for UpdateSprintConfig"""
    input: UpdateSprintConfigInput!
  ): UpdateSprintConfigPayload

  """Update or create user persona"""
  updateUserPersona(
    """Parameters for UpdatePersona"""
    input: UpdatePersonaInput!
  ): UpdatePersonaPayload

  """Update a Workspace"""
  updateWorkspace(
    """Parameters for UpdateWorkspace"""
    input: UpdateWorkspaceInput!
  ): UpdateWorkspacePayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type Organization implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
}

interface Owner {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum PermissionLevel {
  ADMIN
  NONE
  READ
  WRITE
}

type PersonaData {
  newsletterConsent: String
  organizationSize: String
  projectManagementTool: String
  role: String
  teamSize: String
}

type Pipeline implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  description: String
  hasEstimatedIssues: Boolean!
  id: ID!
  isDefaultPRPipeline: Boolean!
  isEpicPipeline: Boolean!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    repositoryGhId: Int
    state: IssueState
  ): IssueConnection!
  itemBefore: Pipeline
  name: String!
  pipelineToPipelineAutomationDestinations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineToPipelineAutomationConnection!
  pipelineToPipelineAutomationSources(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineToPipelineAutomationConnection!
  stage: PipelineStage
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""The connection type for Pipeline."""
type PipelineConnection {
  """A list of edges."""
  edges: [PipelineEdge!]!

  """A list of nodes."""
  nodes: [Pipeline!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

type PipelineCounts {
  issuesCount: Int!
  pullRequestsCount: Int!
  sumEstimates: Float!
}

type PipelineDeleted {
  destinationPipeline: Pipeline!
  eventId: ID!
  id: ID!
}

"""An edge in a connection."""
type PipelineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Pipeline!
}

type PipelineIssue {
  id: ID!
  issue: Issue!
  itemAfter: PipelineIssue
  itemBefore: PipelineIssue
  latestTransferTime: ISO8601DateTime
  pipeline: Pipeline!
  priority: Priority
  workspace: Workspace!
}

"""The connection type for PipelineIssue."""
type PipelineIssueConnection {
  """A list of edges."""
  edges: [PipelineIssueEdge!]!

  """A list of nodes."""
  nodes: [PipelineIssue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PipelineIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PipelineIssue!
}

type PipelineIssueMove {
  movedAt: Float!
  pipelineIssue: PipelineIssue!
  sourcePipelineId: ID!
}

enum PipelineIssuePosition {
  END
  START
}

type PipelineIssueRebalanced {
  id: ID!
  issueId: ID!
  relativePosition: BigInt!
}

enum PipelineStage {
  COMPLETED
  DEVELOPMENT
  REVIEW
}

type PipelineToPipelineAutomation implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  destinationPipeline: Pipeline!
  id: ID!
  sourcePipeline: Pipeline!
  updatedAt: ISO8601DateTime!
}

"""The connection type for PipelineToPipelineAutomation."""
type PipelineToPipelineAutomationConnection {
  """A list of edges."""
  edges: [PipelineToPipelineAutomationEdge!]!

  """A list of nodes."""
  nodes: [PipelineToPipelineAutomation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PipelineToPipelineAutomationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PipelineToPipelineAutomation!
}

type PrConnectionStatus {
  connectable: Boolean!
  disconnectable: Boolean!
  issue: Issue
}

type Priority implements Timestamps {
  color: String!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Priority."""
type PriorityConnection {
  """A list of edges."""
  edges: [PriorityEdge!]!

  """A list of nodes."""
  nodes: [Priority!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PriorityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Priority!
}

type Project implements IssueProgress & Node & Timestamps & ViewerPermission {
  createdAt: ISO8601DateTime!
  description: String
  endOn: ISO8601Date
  epics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EpicConnection!
  id: ID!
  issueCountProgress: IssueCountProgress
  issueEstimateProgress: IssueEstimateProgress
  name: String!
  startOn: ISO8601Date
  state: ProjectState!
  updatedAt: ISO8601DateTime!
  viewerAbilities: ProjectAbilities!
  viewerPermission: PermissionLevel!
}

type ProjectAbilities {
  closeAllEpics: Boolean!
  scaleDates: Boolean!
  shiftDates: Boolean!
}

"""The connection type for Project."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge!]!

  """A list of nodes."""
  nodes: [Project!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ProjectDateAction {
  SCALE
  SHIFT
}

"""An edge in a connection."""
type ProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Project!
}

input ProjectInput {
  description: String
  name: String!
}

enum ProjectState {
  CLOSED
  OPEN
}

type PullRequest implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  draft: Boolean!
  ghCreatedAt: ISO8601DateTime!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  state: PullRequestState!
  updatedAt: ISO8601DateTime!
}

type PullRequestReview implements GithubTimestamps & Timestamps {
  createdAt: ISO8601DateTime!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  state: PullRequestReviewState!
  submittedAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  user: Owner
}

"""The connection type for PullRequestReview."""
type PullRequestReviewConnection {
  """A list of edges."""
  edges: [PullRequestReviewEdge!]!

  """A list of nodes."""
  nodes: [PullRequestReview!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type PullRequestReviewEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequestReview!
}

enum PullRequestReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
}

enum PullRequestState {
  CLOSED
  MERGED
  OPEN
}

type Query {
  """Return the enterprise_instance model - Enterprise only"""
  enterpriseInstance: EnterpriseInstance

  """Lookup an Epic by its number and GitHub Repository ID"""
  epicByIssueInfo(issueNumber: Int!, repositoryGhId: Int!): Epic @deprecated(reason: "Use `issueByInfo.epic`.")

  """Lookup an Issue by repository_gh_id and issue_number"""
  issueByInfo(forceFetch: Boolean = false, issueNumber: Int!, repositoryGhId: Int!): Issue!

  """
  A concatenated list of all issues connected to any
             of the given issues in the passed workspace
  """
  issueConnections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    issueIds: [ID!]!

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID!
  ): IssueConnection!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Lookup an Owner by GitHub database ID"""
  ownerByGhId(ghId: Int!): Owner

  """Lookup an Owner by GitHub login"""
  ownerByLogin(login: String!): Owner

  """Look up a Pipeline by its mongo_id (if it has one)"""
  pipelineByMongoId(mongoId: ID!): Pipeline!

  """preview sprint config schedules"""
  previewSprintConfig(endOn: ISO8601Date!, startOn: ISO8601Date!, tzIdentifier: String!): SprintConfigPreview

  """User's recently viewed Workspaces"""
  recentlyViewedWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    repositoryGhIds: [ID!]
  ): WorkspaceConnection!

  """Get a release report by either a mongo_id or eid"""
  release(id: ID!): Release!

  """Lookup repositories by their GitHub ID"""
  repositoriesByGhId(forceCheckPermissionLevel: PermissionLevel, ghIds: [Int!]!): [Repository!]!

  """Lookup a Repository by its gh_id"""
  repository(ghId: Int!): Repository!

  """Lookup a repository by its GitHub ID"""
  repositoryByGhId(ghId: Int!): Repository!

  """Search and filter issues per pipeline"""
  searchClosedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueSearchFiltersInput!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
    workspaceId: ID!
  ): IssueConnection

  """Search and filter issues per pipeline"""
  searchClosedIssuesCounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueSearchFiltersInput!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
    workspaceId: ID!
  ): IssueConnection

  """Search and filter issues inside repository"""
  searchEpicAssignableIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    epicIssueByInfo: IssueInfoInput
    filters: EpicAssignableIssueSearchFiltersInput!

    """Returns the first _n_ elements from the list."""
    first: Int
    includeClosed: Boolean

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
    workspaceId: ID!
  ): IssueConnection

  """Search and filter issues inside repository"""
  searchIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    epicIssueByInfo: IssueInfoInput
    filters: EpicAssignableIssueSearchFiltersInput!

    """Returns the first _n_ elements from the list."""
    first: Int
    includeClosed: Boolean

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
    workspaceId: ID!
  ): IssueConnection

  """Search and filter issues per pipeline"""
  searchIssuesByPipeline(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueSearchFiltersInput!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: IssueOrderInput
    pipelineId: ID!
    query: String
  ): IssueConnection

  """Search and filter issues per pipeline"""
  searchIssuesByPipelineCounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: IssueSearchFiltersInput!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: IssueOrderInput
    pipelineId: ID!
    query: String
  ): IssueConnection

  """
  PipelineToPipelineAutomation records that are triggered when an issue moves into a Pipeline
  """
  triggeredPipelineToPipelineAutomations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    issue: IssueInfoInput!

    """Returns the last _n_ elements from the list."""
    last: Int
    pipelineId: ID!
  ): PipelineToPipelineAutomationConnection!

  """Return the state of the user import process"""
  userImport: UserImport

  """Lookup users with or without search term and filters - Enterprise only"""
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    enterpriseRole: EnterpriseSeatRole

    """Returns the first _n_ elements from the list."""
    first: Int
    hasActiveEnterpriseSeatRequest: Boolean
    hasEnterpriseSeat: Boolean

    """Returns the last _n_ elements from the list."""
    last: Int
    orderBy: UserOrderInput
    query: String
  ): UserConnection!

  """Return the current zenhub user"""
  viewer: ZenhubUser!

  """Lookup Workspace by its mongo_id"""
  workspace(id: ID!): Workspace
}

type Release implements Node & Timestamps & ViewerPermission {
  closedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  description: String
  endOn: ISO8601Date
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  mongoId: ID
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryConnection!
  startOn: ISO8601Date
  state: ReleaseState!
  title: String!
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
}

"""The connection type for Release."""
type ReleaseConnection {
  """A list of edges."""
  edges: [ReleaseEdge!]!

  """A list of nodes."""
  nodes: [Release!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

input ReleaseCreateInput {
  description: String
  endOn: ISO8601Date!
  repositoryGhIds: [Int!]!
  startOn: ISO8601Date!
  title: String!
}

"""An edge in a connection."""
type ReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Release!
}

enum ReleaseState {
  CLOSED
  OPEN
}

"""Filter by ReleaseState"""
input ReleaseStateInput {
  eq: ReleaseState!
}

input ReleaseUpdateInput {
  description: String
  endOn: ISO8601Date
  startOn: ISO8601Date
  state: ReleaseState
  title: String
}

"""Autogenerated input type of RemoveAssigneesFromIssue"""
input RemoveAssigneesFromIssueInput {
  assigneeLogins: [String!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
}

"""Autogenerated return type of RemoveAssigneesFromIssue"""
type RemoveAssigneesFromIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of RemoveAssigneesFromIssues"""
input RemoveAssigneesFromIssuesInput {
  assigneeIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
}

"""Autogenerated return type of RemoveAssigneesFromIssues"""
type RemoveAssigneesFromIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of RemoveEpicFromProject"""
input RemoveEpicFromProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicId: ID!
  projectId: ID!
}

"""Autogenerated return type of RemoveEpicFromProject"""
type RemoveEpicFromProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  project: Project!
}

"""Autogenerated input type of RemoveEpicFromRoadmap"""
input RemoveEpicFromRoadmapInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicId: ID!
  roadmapId: ID!
}

"""Autogenerated return type of RemoveEpicFromRoadmap"""
type RemoveEpicFromRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  roadmap: Roadmap!
}

"""Autogenerated input type of RemoveEstimateSetValue"""
input RemoveEstimateSetValueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: Int!
  value: Float!
}

"""Autogenerated return type of RemoveEstimateSetValue"""
type RemoveEstimateSetValuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimateSet: EstimateSet!
}

"""Autogenerated input type of RemoveEstimationVote"""
input RemoveEstimationVoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimationVoteId: ID!
}

"""Autogenerated return type of RemoveEstimationVote"""
type RemoveEstimationVotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimationVote: EstimationVote!
}

"""Autogenerated input type of RemoveIssueInfoPriorities"""
input RemoveIssueInfoPrioritiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issues: [IssueInfoInput!]!
  workspaceId: ID!
}

"""Autogenerated return type of RemoveIssueInfoPriorities"""
type RemoveIssueInfoPrioritiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of RemoveIssuesFromEpic"""
input RemoveIssuesFromEpicInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicId: ID!
  issueIds: [ID!]!
}

"""Autogenerated return type of RemoveIssuesFromEpic"""
type RemoveIssuesFromEpicPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of RemoveIssuesFromEpics"""
input RemoveIssuesFromEpicsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epicIds: [ID!]!
  issueIds: [ID!]!
}

"""Autogenerated return type of RemoveIssuesFromEpics"""
type RemoveIssuesFromEpicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epics: [Epic!]!
}

"""Autogenerated input type of RemoveIssuesFromReleases"""
input RemoveIssuesFromReleasesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  releaseIds: [ID!]!
}

"""Autogenerated return type of RemoveIssuesFromReleases"""
type RemoveIssuesFromReleasesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  releases: [Release!]!
}

"""Autogenerated input type of RemoveIssuesFromSprints"""
input RemoveIssuesFromSprintsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  sprintIds: [ID!]!
}

"""Autogenerated return type of RemoveIssuesFromSprints"""
type RemoveIssuesFromSprintsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprints: [Sprint!]!
}

"""Autogenerated input type of RemoveLabelsFromIssue"""
input RemoveLabelsFromIssueInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  labelIds: [ID!]!
}

"""Autogenerated return type of RemoveLabelsFromIssue"""
type RemoveLabelsFromIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of RemoveLabelsFromIssues"""
input RemoveLabelsFromIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  labelIds: [ID!]!
}

"""Autogenerated return type of RemoveLabelsFromIssues"""
type RemoveLabelsFromIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  failedIssues: [Issue!]!
  githubErrors: JSON!
  successCount: Int!
}

"""Autogenerated input type of RemoveProjectFromRoadmap"""
input RemoveProjectFromRoadmapInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
  roadmapId: ID!
}

"""Autogenerated return type of RemoveProjectFromRoadmap"""
type RemoveProjectFromRoadmapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
  projectDeleted: Boolean!
  roadmap: Roadmap!
}

"""Autogenerated input type of RemoveRepositoriesFromRelease"""
input RemoveRepositoriesFromReleaseInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  releaseId: ID!
  repositoryGhIds: [Int!]!
}

"""Autogenerated return type of RemoveRepositoriesFromRelease"""
type RemoveRepositoriesFromReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of RemoveWorkspaceLabelFilters"""
input RemoveWorkspaceLabelFiltersInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceLabelFiltersIds: [ID!]!
}

"""Autogenerated return type of RemoveWorkspaceLabelFilters"""
type RemoveWorkspaceLabelFiltersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """deleted workspace label filters"""
  workspaceLabelFilters: [WorkspaceLabelFilter!]!
}

type Repository implements GithubTimestamps & Node & Timestamps {
  assignableUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
  ): UserConnection!
  createdAt: ISO8601DateTime!
  description: String
  estimateSet: EstimateSet!
  ghCreatedAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID
  ghUpdatedAt: ISO8601DateTime!
  id: ID!
  import: RepositoryImport!
  isFavorite: Boolean!
  isPrivate: Boolean!
  issueTemplates(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueTemplateConnection!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LabelConnection!
  milestones(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): MilestoneConnection!
  name: String!
  oldestWorkspace: Workspace @deprecated(reason: "Backwards compatibility. Use Repository.workspaces_connection")
  owner: Owner!
  ownerName: String!
  permissions: RepositoryPermission!
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ReleaseConnection!
  updatedAt: ISO8601DateTime!
  workspaces: [Workspace!]! @deprecated(reason: "Use `Repository.workspaces_connection`.")
  workspacesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceConnection!
}

enum RepositoryAction {
  ESTIMATION_VOTES_STATE_UPDATED
}

type RepositoryBroadcast {
  """Action that triggered a broadcast"""
  action: RepositoryAction!

  """Name of the field with a fulfilled data"""
  fieldName: String!
  issues: [IssueUpdate!]
}

"""The connection type for Repository."""
type RepositoryConnection {
  """A list of edges."""
  edges: [RepositoryEdge!]!

  """A list of nodes."""
  nodes: [Repository!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Repository!
}

type RepositoryFavorite implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  repository: Repository!
  updatedAt: ISO8601DateTime!
}

"""The connection type for RepositoryFavorite."""
type RepositoryFavoriteConnection {
  """A list of edges."""
  edges: [RepositoryFavoriteEdge!]!

  """A list of nodes."""
  nodes: [RepositoryFavorite!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryFavoriteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RepositoryFavorite!
}

type RepositoryImport implements Timestamps {
  closedIssues: RepositoryImportResource
  createdAt: ISO8601DateTime!
  id: ID!
  openIssues: RepositoryImportResource
  resources(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryImportResourceConnection!
  state: RepositoryImportState!
  updatedAt: ISO8601DateTime!
}

type RepositoryImportResource implements Timestamps {
  completedAt: ISO8601DateTime
  completedPages: Int
  createdAt: ISO8601DateTime!
  id: ID!
  kind: RepositoryImportResourceKind!
  startedAt: ISO8601DateTime
  state: RepositoryImportResourceState!
  totalPages: Int
  updatedAt: ISO8601DateTime!
}

"""The connection type for RepositoryImportResource."""
type RepositoryImportResourceConnection {
  """A list of edges."""
  edges: [RepositoryImportResourceEdge!]!

  """A list of nodes."""
  nodes: [RepositoryImportResource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryImportResourceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RepositoryImportResource!
}

enum RepositoryImportResourceKind {
  CLOSED_ISSUES
  OPEN_ISSUES
}

enum RepositoryImportResourceState {
  COMPLETED
  IN_PROGRESS
  PENDING
}

enum RepositoryImportState {
  COMPLETED
  IN_PROGRESS
  PENDING
  USABLE
}

type RepositoryMatch {
  matchedRepositories: [Repository!]!
  workspace: Workspace!
}

"""Autogenerated return type of Repository"""
type RepositoryPayload {
  updates: RepositoryBroadcast!
}

type RepositoryPermission {
  admin: Boolean!
  pull: Boolean!
  push: Boolean!
}

enum RepositoryResources {
  ASSIGNEES
  ISSUES
  LABELS
  MILESTONES
}

"""Autogenerated input type of RequestEnterpriseSeat"""
input RequestEnterpriseSeatInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RequestEnterpriseSeat"""
type RequestEnterpriseSeatPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

type ReviewRequest implements Timestamps {
  createdAt: ISO8601DateTime!
  ghId: Int!
  ghNodeId: ID!
  id: ID!
  reviewer: Reviewer
  updatedAt: ISO8601DateTime!
}

"""The connection type for ReviewRequest."""
type ReviewRequestConnection {
  """A list of edges."""
  edges: [ReviewRequestEdge!]!

  """A list of nodes."""
  nodes: [ReviewRequest!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ReviewRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ReviewRequest!
}

union Reviewer = User

type Roadmap implements Node & Timestamps & ViewerPermission {
  createdAt: ISO8601DateTime!
  id: ID!
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  workspace: Workspace!
}

union RoadmapItem = Epic | Project

"""The connection type for RoadmapItem."""
type RoadmapItemConnection {
  """A list of edges."""
  edges: [RoadmapItemEdge!]!

  """A list of nodes."""
  nodes: [RoadmapItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type RoadmapItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RoadmapItem
}

type ScopeChange {
  action: BucketIssueHistoryAction!
  effectiveAt: ISO8601DateTime!
  estimateValue: Float
  issue: Issue!
}

"""The connection type for ScopeChange."""
type ScopeChangeConnection {
  """A list of edges."""
  edges: [ScopeChangeEdge!]!

  """A list of nodes."""
  nodes: [ScopeChange!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ScopeChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScopeChange!
}

"""Autogenerated input type of SeatEnterpriseUsers"""
input SeatEnterpriseUsersInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  logins: [String!]!
}

"""Autogenerated return type of SeatEnterpriseUsers"""
type SeatEnterpriseUsersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  users: [User!]!
}

"""Autogenerated input type of SetDefaultWorkspaceRepositoryFromToad"""
input SetDefaultWorkspaceRepositoryFromToadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  defaultRepositoryGhId: Int!
  workspaceId: ID!
}

"""Autogenerated return type of SetDefaultWorkspaceRepositoryFromToad"""
type SetDefaultWorkspaceRepositoryFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceRepository: WorkspaceRepository!
}

"""Autogenerated input type of SetEnterpriseSeatAssignmentStrategy"""
input SetEnterpriseSeatAssignmentStrategyInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  strategy: EnterpriseSeatAssignmentStrategy!
}

"""Autogenerated return type of SetEnterpriseSeatAssignmentStrategy"""
type SetEnterpriseSeatAssignmentStrategyPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  enterpriseInstance: EnterpriseInstance!
}

"""Autogenerated input type of SetEnterpriseUserRole"""
input SetEnterpriseUserRoleInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  login: String!
  role: EnterpriseSeatRole!
}

"""Autogenerated return type of SetEnterpriseUserRole"""
type SetEnterpriseUserRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

"""Autogenerated input type of SetEstimateFromToad"""
input SetEstimateFromToadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: IssueInfoInput!
  value: Float
}

"""Autogenerated return type of SetEstimateFromToad"""
type SetEstimateFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of SetEstimate"""
input SetEstimateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  value: Float
}

"""Autogenerated return type of SetEstimate"""
type SetEstimatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of SetEstimationVote"""
input SetEstimationVoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimationVoteId: ID!
  value: Float
}

"""Autogenerated return type of SetEstimationVote"""
type SetEstimationVotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  estimationVote: EstimationVote!
}

"""Autogenerated input type of SetFavoriteRepositoryFromToad"""
input SetFavoriteRepositoryFromToadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: Int!
}

"""Autogenerated return type of SetFavoriteRepositoryFromToad"""
type SetFavoriteRepositoryFromToadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryFavorite: RepositoryFavorite!
}

"""Autogenerated input type of SetFavoriteWorkspace"""
input SetFavoriteWorkspaceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated return type of SetFavoriteWorkspace"""
type SetFavoriteWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceFavorite: WorkspaceFavorite!
}

"""Autogenerated input type of SetIssueInfoPriorities"""
input SetIssueInfoPrioritiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issues: [IssueInfoInput!]!
  priorityId: ID!
}

"""Autogenerated return type of SetIssueInfoPriorities"""
type SetIssueInfoPrioritiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of SetMultipleEstimates"""
input SetMultipleEstimatesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueIds: [ID!]!
  value: Float
}

"""Autogenerated return type of SetMultipleEstimates"""
type SetMultipleEstimatesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issues: [Issue!]!
}

"""Autogenerated input type of SetPipelineStages"""
input SetPipelineStagesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  completedPipelineIds: [ID!]
  inDevelopmentPipelineIds: [ID!]
  inReviewPipelineIds: [ID!]
  workspaceId: ID!
}

"""Autogenerated return type of SetPipelineStages"""
type SetPipelineStagesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelines: [Pipeline!]!
}

"""Autogenerated input type of SetPriorityOnPipelineIssues"""
input SetPriorityOnPipelineIssuesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssueIds: [ID!]!
  priorityId: ID
}

"""Autogenerated return type of SetPriorityOnPipelineIssues"""
type SetPriorityOnPipelineIssuesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineIssues: [PipelineIssue!]!
}

"""Autogenerated input type of SetPullRequestPipeline"""
input SetPullRequestPipelineInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineId: ID!
  workspaceId: ID!
}

"""Autogenerated return type of SetPullRequestPipeline"""
type SetPullRequestPipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of SetWorkspaceViewedNow"""
input SetWorkspaceViewedNowInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspaceId: ID!
}

"""Autogenerated return type of SetWorkspaceViewedNow"""
type SetWorkspaceViewedNowPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

"""Autogenerated input type of SplitWorkspaceRepository"""
input SplitWorkspaceRepositoryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repositoryGhId: Int!
  workspaceId: ID!
}

"""Autogenerated return type of SplitWorkspaceRepository"""
type SplitWorkspaceRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  splitWorkspace: Workspace!
  workspace: Workspace!
}

type Sprint implements Node & Timestamps {
  closedIssuesCount: Int!
  completedPoints: Float!
  createdAt: ISO8601DateTime!
  endAt: ISO8601DateTime!
  id: ID!
  issues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  name: String

  """batching is disabled for this field"""
  scopeChange(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ScopeChangeConnection!
  sprintIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    labelIds: [ID!]

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SprintIssueConnection!
  startAt: ISO8601DateTime!
  state: SprintState!
  totalPoints: Float!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

type SprintConfig implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  endDay: SprintConfigDayOfTheWeek!
  id: ID!
  name: String!
  period: SprintConfigPeriod!
  settings: SprintConfigSettings!
  startDay: SprintConfigDayOfTheWeek!
  tzIdentifier: String!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

input SprintConfigCreateInput {
  endOn: ISO8601Date!
  name: String!
  settings: SprintConfigSettingsInput!
  startOn: ISO8601Date!
  tzIdentifier: String!
  workspaceId: ID!
}

enum SprintConfigDayOfTheWeek {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

input SprintConfigIssuesFromPipelineInput {
  enabled: Boolean!
  pipelineId: ID
  totalStoryPoints: Float
}

enum SprintConfigPeriod {
  BI_WEEKLY
  QUAD_WEEKLY
  TRI_WEEKLY
  WEEKLY
}

type SprintConfigPreview {
  period: SprintConfigPeriod!
  sprints: [Sprint!]!
}

type SprintConfigSettings {
  issuesFromPipeline: SprintConfigSettingsIssuesFromPipeline!
  moveUnfinishedIssues: Boolean!
}

input SprintConfigSettingsInput {
  issuesFromPipeline: SprintConfigIssuesFromPipelineInput!
  moveUnfinishedIssues: Boolean!
}

type SprintConfigSettingsIssuesFromPipeline {
  enabled: Boolean!
  pipelineId: ID
  totalStoryPoints: Float
}

input SprintConfigUpdateInput {
  endOn: ISO8601Date
  name: String!
  settings: SprintConfigSettingsInput!
  startOn: ISO8601Date
  tzIdentifier: String
  workspaceId: ID!
}

"""The connection type for Sprint."""
type SprintConnection {
  """A list of edges."""
  edges: [SprintEdge!]!

  """A list of nodes."""
  nodes: [Sprint!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SprintEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Sprint!
}

input SprintFiltersInput {
  id: SprintIdInput
  state: SprintStateInput
}

"""Filter sprint ID column"""
input SprintIdInput {
  in: [ID!]
  nin: [ID!]
  notInAny: Boolean = false
}

type SprintIssue implements Node & Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue!
  sprint: Sprint!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SprintIssue."""
type SprintIssueConnection {
  """A list of edges."""
  edges: [SprintIssueEdge!]!

  """A list of nodes."""
  nodes: [SprintIssue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SprintIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SprintIssue!
}

enum SprintOrderField {
  END_AT
  START_AT
}

"""Order of Sprint connection"""
input SprintOrderInput {
  direction: OrderDirection
  field: SprintOrderField
}

enum SprintState {
  CLOSED
  OPEN
}

"""Filter by SprintState"""
input SprintStateInput {
  eq: SprintState!
}

"""Filter a String column"""
input StringInput {
  in: [String!]
  nin: [String!]
  notInAny: Boolean = false
}

"""Autogenerated input type of SubmitProductFeedback"""
input SubmitProductFeedbackInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  content: String!
  customerEmail: String!
  tags: [String!]
  title: String!
}

"""Autogenerated return type of SubmitProductFeedback"""
type SubmitProductFeedbackPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  response: String!
}

type Subscription {
  """Issue specific updates"""
  issueUpdates(issueId: ID!): IssuePayload!

  """Board specific updates for repository issues"""
  repositoryUpdates(repositoryId: ID!): RepositoryPayload!

  """Workspace specific updates"""
  workspaceUpdates(workspaceId: ID!): WorkspacePayload!
}

type TimelineItem implements Timestamps {
  createdAt: ISO8601DateTime!
  data: JSON
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for TimelineItem."""
type TimelineItemConnection {
  """A list of edges."""
  edges: [TimelineItemEdge!]!

  """A list of nodes."""
  nodes: [TimelineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: TimelineItem!
}

interface Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of TrackEvent"""
input TrackEventInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  eventName: String!
  properties: JSON!
}

"""Autogenerated return type of TrackEvent"""
type TrackEventPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type Unassignable {
  assignee: User!
  issues: [Issue!]!
}

"""Autogenerated input type of UnseatEnterpriseUser"""
input UnseatEnterpriseUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  login: String!
}

"""Autogenerated return type of UnseatEnterpriseUser"""
type UnseatEnterpriseUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

"""Autogenerated input type of UpdateEpicDates"""
input UpdateEpicDatesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  endOn: ISO8601Date
  epicId: ID!
  roadmapId: ID
  startOn: ISO8601Date
}

"""Autogenerated return type of UpdateEpicDates"""
type UpdateEpicDatesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
}

"""Autogenerated input type of UpdateEpicIssuesByIssueInfos"""
input UpdateEpicIssuesByIssueInfosInput {
  addIssues: [IssueInfoInput!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: IssueInfoInput!
  removeIssues: [IssueInfoInput!]!
}

"""Autogenerated return type of UpdateEpicIssuesByIssueInfos"""
type UpdateEpicIssuesByIssueInfosPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  epic: Epic!
  issuesAdded: [Issue]!
  issuesRemoved: [Issue]!
}

"""Autogenerated input type of UpdateHubspotId"""
input UpdateHubspotIdInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ghId: ID!
  hubspotId: ID!
  objectType: HubspotObject!
}

"""Autogenerated return type of UpdateHubspotId"""
type UpdateHubspotIdPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubIdentity: ZenhubIdentity!
}

"""Autogenerated input type of UpdateIssue"""
input UpdateIssueInput {
  body: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issueId: ID!
  milestoneId: ID
  state: IssueState
  title: String
}

"""Autogenerated return type of UpdateIssue"""
type UpdateIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: Issue!
}

"""Autogenerated input type of UpdateOrgProperties"""
input UpdateOrgPropertiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  properties: JSON!
  zenhubOrganizationId: ID!
}

"""Autogenerated return type of UpdateOrgProperties"""
type UpdateOrgPropertiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of UpdatePersona"""
input UpdatePersonaInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  newsletterConsent: String
  organizationSize: String
  projectManagementTool: String
  role: String
  teamSize: String
}

"""Autogenerated return type of UpdatePersona"""
type UpdatePersonaPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zenhubUser: ZenhubUser!
}

"""Autogenerated input type of UpdatePipeline"""
input UpdatePipelineInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  description: String
  name: String
  pipelineId: ID!
  position: Int
}

"""Autogenerated return type of UpdatePipeline"""
type UpdatePipelinePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
}

"""Autogenerated input type of UpdateProjectDates"""
input UpdateProjectDatesInput {
  action: ProjectDateAction!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  endOn: ISO8601Date!
  projectId: ID!
  startOn: ISO8601Date!
}

"""Autogenerated return type of UpdateProjectDates"""
type UpdateProjectDatesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateProject"""
input UpdateProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  description: String
  name: String
  projectId: ID!
}

"""Autogenerated return type of UpdateProject"""
type UpdateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateProjectState"""
input UpdateProjectStateInput {
  applyToEpics: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
  state: ProjectState!
}

"""Autogenerated return type of UpdateProjectState"""
type UpdateProjectStatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateRelease"""
input UpdateReleaseInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: ReleaseUpdateInput!
  releaseId: ID!
}

"""Autogenerated return type of UpdateRelease"""
type UpdateReleasePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  release: Release!
}

"""Autogenerated input type of UpdateSprintConfig"""
input UpdateSprintConfigInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintConfig: SprintConfigUpdateInput!
}

"""Autogenerated return type of UpdateSprintConfig"""
type UpdateSprintConfigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprintConfig: SprintConfig!
}

"""Autogenerated input type of UpdateSprint"""
input UpdateSprintInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String
  sprintId: ID!
}

"""Autogenerated return type of UpdateSprint"""
type UpdateSprintPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sprint: Sprint!
}

"""Autogenerated input type of UpdateUserProperties"""
input UpdateUserPropertiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  properties: JSON!
}

"""Autogenerated return type of UpdateUserProperties"""
type UpdateUserPropertiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of UpdateWorkspace"""
input UpdateWorkspaceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  defaultRepositoryGhId: Int
  description: String
  name: String!
  workspaceId: ID!
}

"""Autogenerated return type of UpdateWorkspace"""
type UpdateWorkspacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workspace: Workspace!
}

type User implements Owner & Timestamps {
  avatarUrl: String!
  createdAt: ISO8601DateTime!
  ghId: Int
  ghNodeId: ID
  hasWorkspace: Boolean!
  id: ID!
  login: String!
  name: String
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  repositoryFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryFavoriteConnection!
  roadmapItems(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoadmapItemConnection!
  searchWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String!
    repositoryGhIds: [Int!]
  ): WorkspaceSearchMatchConnection!
  type: String!
  updatedAt: ISO8601DateTime!
  workspaceFavorites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceFavoriteConnection!
  zenhubUser: ZenhubUser
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge!]!

  """A list of nodes."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}

type UserImport implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  lastGhId: Int
  lastQueriedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

enum UserOrderField {
  LOGIN
  REQUESTED_AT
}

"""Order of User connection"""
input UserOrderInput {
  direction: OrderDirection
  field: UserOrderField
}

type VelocityDiff {
  difference: Float
  sprintsCount: Int!
  velocity: Float!
}

interface ViewerPermission {
  viewerPermission: PermissionLevel!
}

type Workspace implements Timestamps & ViewerPermission {
  activeSprint: Sprint
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    login: StringInput
    query: String
    repositoryGhIds: [Int!]
  ): UserConnection

  """Average velocity of recently(last 3) closed sprints"""
  averageSprintVelocity: Float

  """Average velocity of recently closed sprints with last sprint influence"""
  averageSprintVelocityWithDiff(skipDiff: Boolean): VelocityDiff

  """Only for querying control chart"""
  closedPipeline: Pipeline!
  createdAt: ISO8601DateTime!
  defaultRepository: Repository
  description: String
  displayName: String!
  epics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    ids: [ID!]

    """Returns the last _n_ elements from the list."""
    last: Int
    orderBy: EpicOrderInput
    query: String
    repositoryGhIds: [Int!]
    state: IssueStateInput
  ): EpicConnection
  flags: JSON!
  hasEstimatedIssues: Boolean!
  id: ID!
  importState: WorkspaceImportState!
  isDeletable: Boolean!
  isEditable: Boolean!
  isFavorite: Boolean!
  issueFlowStats(daysInCycle: Int): IssueFlowStats
  labelFilterOptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    name: StringInput
    query: String
    repositoryGhIds: [Int!]
  ): LabelConnection
  labelFilters(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceLabelFilterConnection!
  mongoId: ID!
  name: String
  pipelineToPipelineAutomations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineToPipelineAutomationConnection!
  pipelines(includeClosed: Boolean): [Pipeline!]! @deprecated(reason: "Use `Workspace.pipelines_connection`.")
  pipelinesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PipelineConnection!
  previousSprint: Sprint
  priorities: [Priority!]! @deprecated(reason: "Use `Workspace.priorities_connection`.")
  prioritiesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PriorityConnection!
  queueSync(resources: [RepositoryResources!]!): Boolean!
  relatedWorkspaces(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkspaceConnection!
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    ids: [ID!]

    """Returns the last _n_ elements from the list."""
    last: Int
    query: String
    repositoryGhIds: [Int!]
    state: ReleaseStateInput
  ): ReleaseConnection!
  repositories: [Repository!] @deprecated(reason: "Use `Workspace.repositories_connection`.")
  repositoriesConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryConnection
  roadmap: Roadmap!
  sprintConfig: SprintConfig
  sprints(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SprintFiltersInput

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    orderBy: SprintOrderInput
    query: String
  ): SprintConnection!
  upcomingSprint: Sprint
  updatedAt: ISO8601DateTime!
  viewerPermission: PermissionLevel!
  zenhubOwner: ZenhubIdentity
}

enum WorkspaceAction {
  EPIC_CREATED
  EPIC_DELETED
  ISSUES_UPDATED
  PIPELINE_COUNTS_CHANGED
  PIPELINE_CREATED
  PIPELINE_DELETED
  PIPELINE_ISSUES_REBALANCED
  PIPELINE_ISSUE_CREATED
  PIPELINE_ISSUE_MOVED
  PIPELINE_MOVED
  PIPELINE_UPDATED
  REPOSITORY_ADDED
  REPOSITORY_REMOVED
  SPRINT_CONFIG_UPDATED
  WORKSPACE_DELETED
  WORKSPACE_UPDATED
}

type WorkspaceBroadcast {
  """Action that triggered a broadcast"""
  action: WorkspaceAction!

  """Name of the field with a fulfilled data"""
  fieldName: String!
  filteredPipelineIssues: [PipelineIssue!]
  pipelineDeleted: PipelineDeleted
  pipelineIssueMoves: [PipelineIssueMove!]
  pipelineIssues: [PipelineIssue!]
  pipelineIssuesRebalanced: [PipelineIssueRebalanced!]
  pipelines: [Pipeline!]
  sprintConfig: SprintConfig
  workspace: Workspace
}

"""The connection type for Workspace."""
type WorkspaceConnection {
  """A list of edges."""
  edges: [WorkspaceEdge!]!

  """A list of nodes."""
  nodes: [Workspace!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Workspace!
}

type WorkspaceFavorite implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

"""The connection type for WorkspaceFavorite."""
type WorkspaceFavoriteConnection {
  """A list of edges."""
  edges: [WorkspaceFavoriteEdge!]!

  """A list of nodes."""
  nodes: [WorkspaceFavorite!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceFavoriteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkspaceFavorite!
}

enum WorkspaceImportState {
  COMPLETED
  IN_PROGRESS
  PENDING
  USABLE
}

type WorkspaceLabelFilter {
  id: ID!
  labelName: String!
  workspace: Workspace!
}

"""The connection type for WorkspaceLabelFilter."""
type WorkspaceLabelFilterConnection {
  """A list of edges."""
  edges: [WorkspaceLabelFilterEdge!]!

  """A list of nodes."""
  nodes: [WorkspaceLabelFilter!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceLabelFilterEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkspaceLabelFilter!
}

type WorkspaceMatch {
  workspace: Workspace!
}

"""Autogenerated return type of Workspace"""
type WorkspacePayload {
  updates: WorkspaceBroadcast!
}

type WorkspaceRepository implements Timestamps {
  createdAt: ISO8601DateTime!
  id: ID!
  repository: Repository!
  updatedAt: ISO8601DateTime!
  workspace: Workspace!
}

union WorkspaceSearchMatch = RepositoryMatch | WorkspaceMatch

"""The connection type for WorkspaceSearchMatch."""
type WorkspaceSearchMatchConnection {
  """A list of edges."""
  edges: [WorkspaceSearchMatchEdge!]!

  """A list of nodes."""
  nodes: [WorkspaceSearchMatch!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkspaceSearchMatchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: WorkspaceSearchMatch
}

union ZenhubIdentity = ZenhubOrganization | ZenhubUser

type ZenhubOrganization implements Timestamps {
  createdAt: ISO8601DateTime!
  githubOrganization: Organization!
  hubspotId: ID
  id: ID!
  updatedAt: ISO8601DateTime!
}

type ZenhubUser implements Timestamps {
  createdAt: ISO8601DateTime!
  enterpriseSeat: EnterpriseSeat
  estimationGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workspaceId: ID!
  ): EstimationGroupConnection!
  githubUser: User!
  hubspotId: ID
  id: ID!
  personaData: PersonaData
  updatedAt: ISO8601DateTime!
}

"""The connection type for ZenhubUser."""
type ZenhubUserConnection {
  """A list of edges."""
  edges: [ZenhubUserEdge!]!

  """A list of nodes."""
  nodes: [ZenhubUser!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ZenhubUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ZenhubUser!
}